@using AttrectoTest.Blazor.Common.Contracts
@using AttrectoTest.BlazorWeb.Client.Components
@using AttrectoTest.BlazorWeb.Providers
@using Microsoft.AspNetCore.Components.Authorization
@* @rendermode RenderMode.InteractiveServer *@

<CascadingAuthenticationState>
<AuthorizeView>
    <Authorized>
        <div class="flex items-center gap-6">
            <span class="font-semibold text-gray-800">
                @context.User.Identity?.Name
            </span>

            <button @onclick="Logout"
                    class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition">
                Logout
            </button>
        </div>
    </Authorized>
    <NotAuthorized>
            <LoginButton></LoginButton>
    </NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Inject] IAuthManager Auth { get; set; } = default!;
    [Inject] NavigationManager NavigationManager { get; set; } = default!;
    [Inject] AuthenticationStateProvider AuthProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        if (!state.User.Identity?.IsAuthenticated ?? true)
        {
            // Próbáljuk újrainicializálni (hátha most már van token)
            if (AuthProvider is CustomAuthStateProvider custom)
                await custom.InitializeAsync();

            state = await AuthProvider.GetAuthenticationStateAsync();
        }

    }

    private void Login()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void Logout()
    {
        Auth.Logout();
        NavigationManager.NavigateTo("/", forceLoad: true);

    }
}
