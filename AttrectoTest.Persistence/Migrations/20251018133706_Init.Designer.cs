// <auto-generated />
using System;
using AttrectoTest.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttrectoTest.Persistence.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20251018133706_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AttrectoTest.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FeedId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AttrectoTest.Domain.Feed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Feeds", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AttrectoTest.Domain.FeedLike", b =>
                {
                    b.Property<int>("FeedId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedId", "UserId");

                    b.ToTable("FeedLikes");
                });

            modelBuilder.Entity("AttrectoTest.Domain.ImageFeed", b =>
                {
                    b.HasBaseType("AttrectoTest.Domain.Feed");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("ImageFeeds", (string)null);
                });

            modelBuilder.Entity("AttrectoTest.Domain.VideoFeed", b =>
                {
                    b.HasBaseType("AttrectoTest.Domain.ImageFeed");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.ToTable("VideoFeeds", (string)null);
                });

            modelBuilder.Entity("AttrectoTest.Domain.Comment", b =>
                {
                    b.HasOne("AttrectoTest.Domain.Feed", "Feed")
                        .WithMany("Comments")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("AttrectoTest.Domain.FeedLike", b =>
                {
                    b.HasOne("AttrectoTest.Domain.Feed", "Feed")
                        .WithMany("Likes")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("AttrectoTest.Domain.ImageFeed", b =>
                {
                    b.HasOne("AttrectoTest.Domain.Feed", null)
                        .WithOne()
                        .HasForeignKey("AttrectoTest.Domain.ImageFeed", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttrectoTest.Domain.VideoFeed", b =>
                {
                    b.HasOne("AttrectoTest.Domain.ImageFeed", null)
                        .WithOne()
                        .HasForeignKey("AttrectoTest.Domain.VideoFeed", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttrectoTest.Domain.Feed", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
